{"version":3,"sources":["MarkDown.js","App.js","serviceWorker.js","index.js"],"names":["myMarked","require","setOptions","renderer","Renderer","pedantic","gfm","tables","breaks","sanitize","smartLists","smartypants","xhtml","MarkDown","document","getElementById","innerHTML","this","props","text","react_default","a","createElement","className","id","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","event","setState","target","value","onChange","src_MarkDown","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAIIA,aAAWC,EAAQ,IACvBD,EAASE,WAAW,CAClBC,SAAU,IAAIH,EAASI,SACvBC,UAAU,EACVC,KAAK,EACLC,QAAQ,EACRC,QAAQ,EACRC,UAAU,EACVC,YAAY,EACZC,aAAa,EACbC,OAAO,QAaMC,+LARDC,SAASC,eAAe,WAChCC,UAAYhB,EAASiB,KAAKC,MAAMC,uCAGlC,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUC,GAAG,mBANhBC,aCkBRC,cA9Bb,SAAAA,EAAYR,GAAO,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAX,KAAAS,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAf,KAAMC,KACDe,MAAQ,CACXd,KAAO,IAETQ,EAAKO,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KALHA,4EAONU,GACXpB,KAAKqB,SAAS,CACZnB,KAAOkB,EAAME,OAAOC,yCAItB,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACdH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YAAUE,GAAG,SAASD,UAAU,UAAUkB,SAAUxB,KAAKiB,eACzDd,EAAAC,EAAAC,cAACoB,EAAD,CAAUvB,KAAMF,KAAKgB,MAAMd,QAE7BC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACdH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,UAAjB,qCAxBUE,aCQEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASpC,SAASC,eAAe,SD2H3C,kBAAmBoC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.401d6768.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'marked';\r\nimport './App.css';\r\n\r\nvar myMarked = require('marked');\r\nmyMarked.setOptions({\r\n  renderer: new myMarked.Renderer(),\r\n  pedantic: false,\r\n  gfm: true,\r\n  tables: true,\r\n  breaks: false,\r\n  sanitize: false,\r\n  smartLists: true,\r\n  smartypants: false,\r\n  xhtml: false\r\n});\r\n\r\nclass MarkDown extends Component {\r\n  componentDidUpdate(){\r\n    const e = document.getElementById('preview');\r\n    e.innerHTML = myMarked(this.props.text);\r\n  }\r\n  render() {\r\n    return <div className=\"a-block\" id=\"preview\"></div>;\r\n  }\r\n}\r\n\r\nexport default MarkDown;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport MarkDown from './MarkDown.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text : ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      text : event.target.value\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <h1> MarkDown Previewer </h1>\n        <hr className=\"hr margin\" />\n        <div>\n          <textarea id=\"editor\" className=\"a-block\" onChange={this.handleChange} />\n          <MarkDown text={this.state.text}/>\n        </div>\n        <hr className=\"hr margin\" />\n        <small className=\"margin\"> parvathy-santhosh 2018 </small>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}